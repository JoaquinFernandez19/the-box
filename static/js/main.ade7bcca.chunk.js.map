{"version":3,"sources":["actions/index.js","components/Header.js","components/PreWorkPage.js","components/TodoForm.js","components/TaskItem.js","components/TodoLists.js","components/Content.js","components/Tools.js","components/App.js","reducers/index.js","index.js"],"names":["cancelCreatingTodo","type","connect","state","console","log","working","startProject","props","handleStartProject","className","onClick","PreWorkPage","creatingTodo","createTodo","task","payload","useState","inputValue","setInputValue","onSubmit","event","preventDefault","value","onChange","e","target","autoFocus","deleteTodo","taskId","id","text","pendingList","creatingNewTodo","btnRef","useRef","useEffect","current","style","display","map","key","ref","anime","resetProject","window","confirm","App","combineReducers","action","idCreator","length","filter","ReactDOM","render","store","createStore","reducers","document","querySelector"],"mappings":"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","file":"static/js/main.ade7bcca.chunk.js","sourcesContent":["//Action creators\r\n\r\nexport const startProject = () => {\r\n\treturn {\r\n\t\ttype: 'START_PROJECT',\r\n\t};\r\n};\r\nexport const resetProject = () => {\r\n\treturn {\r\n\t\ttype: 'RESET_PROJECT',\r\n\t};\r\n};\r\nexport const changeProjectName = (oldProjectName, newProjectName) => {\r\n\treturn {\r\n\t\ttype: 'CHANGE_PROJECT_NAME',\r\n\t\tpayload: {\r\n\t\t\toldProjectName: oldProjectName,\r\n\t\t\tnewProjectName: newProjectName,\r\n\t\t},\r\n\t};\r\n};\r\n\r\nexport const creatingNewTodo = () => {\r\n\treturn {\r\n\t\ttype: 'CREATING_TODO',\r\n\t};\r\n};\r\nexport const cancelCreatingTodo = () => {\r\n\treturn {\r\n\t\ttype: 'CANCEL_CREATING_TODO',\r\n\t};\r\n};\r\n\r\nexport const createTodo = (task) => {\r\n\treturn {\r\n\t\ttype: 'CREATE_TODO',\r\n\t\tpayload: {\r\n\t\t\ttask: task,\r\n\t\t},\r\n\t};\r\n};\r\n\r\nexport const moveTodoToProgress = (task) => {\r\n\treturn {\r\n\t\ttype: 'MOVE_TODO_PROGRESS',\r\n\t\tpayload: {\r\n\t\t\ttask: task,\r\n\t\t},\r\n\t};\r\n};\r\n\r\nexport const moveTodoToFinish = (task) => {\r\n\treturn {\r\n\t\ttype: 'MOVE_TODO_FINISH',\r\n\t\tpayload: {\r\n\t\t\ttask: task,\r\n\t\t},\r\n\t};\r\n};\r\nexport const deleteTodo = (taskId) => {\r\n\treturn {\r\n\t\ttype: 'DELETE_TODO',\r\n\t\tpayload: {\r\n\t\t\ttaskId: taskId,\r\n\t\t},\r\n\t};\r\n};\r\nexport const changeBackground = (newImg) => {\r\n\treturn {\r\n\t\ttype: 'CHANGE_BACKGROUND',\r\n\t\tpayload: {\r\n\t\t\tnewImg: newImg,\r\n\t\t},\r\n\t};\r\n};\r\nexport const changeFont = (fontSelected) => {\r\n\treturn {\r\n\t\ttype: 'CHANGE_FONT',\r\n\t\tpayload: {\r\n\t\t\tfontSelected: fontSelected,\r\n\t\t},\r\n\t};\r\n};\r\nexport const changeColor = (colorSelected) => {\r\n\treturn {\r\n\t\ttype: 'CHANGE_COLOR',\r\n\t\tpayload: {\r\n\t\t\tcolorSelected: colorSelected,\r\n\t\t},\r\n\t};\r\n};\r\n","import React from 'react';\r\nimport '../styles/header.scss';\r\nimport { FaTasks } from 'react-icons/fa';\r\nimport { IoMdCheckboxOutline } from 'react-icons/io';\r\n//redux\r\nimport { connect } from 'react-redux';\r\nimport { startProject } from '../actions';\r\n//\r\nconst Header = (props) => {\r\n\tconst handleStartProject = () => {\r\n\t\tprops.startProject();\r\n\t};\r\n\r\n\tif (props.working) {\r\n\t\treturn (\r\n\t\t\t<div className=\"header\">\r\n\t\t\t\t<div className=\"new-project-btn active\" onClick={handleStartProject}>\r\n\t\t\t\t\t<p>Start</p>\r\n\t\t\t\t\t<FaTasks className=\"add-icon\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<h2>The Box</h2>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\treturn (\r\n\t\t<div className=\"header\">\r\n\t\t\t<div className=\"new-project-btn\" onClick={handleStartProject}>\r\n\t\t\t\t<p>Start</p>\r\n\t\t\t\t<IoMdCheckboxOutline className=\"add-icon\" />\r\n\t\t\t</div>\r\n\t\t\t<h2>The Box</h2>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n\tconsole.log(state);\r\n\treturn {\r\n\t\tworking: state.working,\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps, { startProject })(Header);\r\n","import React from 'react';\r\nimport '../styles/preWorkPage.scss';\r\n\r\nconst PreWorkPage = () => {\r\n    return(<div className=\"pre-work-page\">\r\n                <h1>A task manager</h1>\r\n                <p>A click away of becoming organized (for free)</p>\r\n            </div>);\r\n}\r\n\r\nexport default PreWorkPage;","import React, {useState} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { createTodo, cancelCreatingTodo } from '../actions';\r\nimport '../styles/todoForm.scss';\r\n\r\n\r\n\r\nconst TodoForm  =  (props) => {\r\n\r\n    const [inputValue,setInputValue] = useState('');\r\n\r\n\r\n    const handleFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(inputValue !== ''){\r\n            props.createTodo(inputValue);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    const closeForm = () => {\r\n        props.cancelCreatingTodo();\r\n        setInputValue('');  \r\n    }\r\n\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    if(props.creatingTodo){\r\n        return <div className='todo-form-div'>\r\n            <form onSubmit={handleFormSubmit} className='todo-form'>\r\n                <textarea type=\"text\" value={inputValue} onChange={handleInputChange} autoFocus/>\r\n                <div className='btns-container'>\r\n                <button type='submit' className='confirm-btn'>Confirm</button>\r\n                <button type='cancel' onClick={closeForm} className='cancel-btn'>Cancel</button>\r\n                </div>\r\n                \r\n            </form>\r\n\r\n        </div>\r\n    }\r\n\r\n\r\n    return null\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        creatingTodo: state.creatingTodo,\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {createTodo,cancelCreatingTodo})(TodoForm);","import React from 'react';\r\nimport '../styles/taskItem.scss';\r\nimport { AiOutlineClose } from 'react-icons/ai';\r\nimport { connect } from 'react-redux';\r\nimport { deleteTodo } from '../actions';\r\n\r\nconst TaskItem = (props) => {\r\n\tconst closeTask = () => {\r\n\t\tprops.deleteTodo(props.id);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div id={props.id} className=\"task-item\">\r\n\t\t\t<p>{props.text}</p>\r\n\t\t\t<div className=\"hiden-delete\" onClick={closeTask}>\r\n\t\t\t\t<AiOutlineClose className=\"icon\" />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default connect(null, { deleteTodo })(TaskItem);\r\n","import React, { useRef, useEffect } from 'react';\r\nimport { BsPlus } from 'react-icons/bs';\r\nimport { connect } from 'react-redux';\r\nimport { creatingNewTodo } from '../actions';\r\n//components\r\nimport TodoForm from './TodoForm';\r\nimport TaskItem from './TaskItem';\r\n//\r\nimport '../styles/todoLists.scss';\r\n//helper\r\n\r\nconst TodoLists = (props) => {\r\n\tconst btnRef = useRef();\r\n\r\n\tconst handleCreatingTodo = () => {\r\n\t\tprops.creatingNewTodo();\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (props.creatingTodo) {\r\n\t\t\tbtnRef.current.style.display = 'none';\r\n\t\t} else {\r\n\t\t\tbtnRef.current.style.display = 'flex';\r\n\t\t}\r\n\t}, [props.creatingTodo]);\r\n\r\n\tconst pendingList = props.pendingList.map((task) => {\r\n\t\treturn <TaskItem key={task.id} id={task.id} text={task.text} />;\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div className=\"content animated fadeIn\">\r\n\t\t\t<div className=\"toDo\">\r\n\t\t\t\t<h4>Pending Tasks</h4>\r\n\t\t\t\t{pendingList}\r\n\r\n\t\t\t\t<div className=\"add-todo\" onClick={handleCreatingTodo} ref={btnRef}>\r\n\t\t\t\t\t<BsPlus className=\"add-todo-cion\" />\r\n\t\t\t\t\t<p>Add a pending task</p>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<TodoForm />\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className=\"doing\">\r\n\t\t\t\t<h4>Working on it</h4>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"finished\">\r\n\t\t\t\t<h4>Finished tasks</h4>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tcreatingTodo: state.creatingTodo,\r\n\t\tpendingList: state.pendingList,\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps, { creatingNewTodo })(TodoLists);\r\n","import React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n//components\r\nimport PreWorkPage from './PreWorkPage';\r\nimport TodoLists from './TodoLists';\r\n//icons\r\n\r\n///\r\nconst Content = (props) => {\r\n\tif (props.working) {\r\n\t\treturn (\r\n\t\t\t<TodoLists/>\r\n\t\t);\r\n\t}\r\n\treturn (\r\n\t\t<PreWorkPage/>\r\n\t);\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tworking: state.working,\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps)(Content);\r\n","import React from 'react';\r\nimport '../styles/tools.scss';\r\nimport { connect } from 'react-redux';\r\n\r\n//icons\r\nimport { FaSkullCrossbones, FaImage } from 'react-icons/fa';\r\nimport { GoTextSize } from 'react-icons/go';\r\nimport { IoIosColorPalette } from 'react-icons/io';\r\nimport { resetProject, cancelCreatingTodo } from '../actions';\r\n\r\nconst anime = 'animated fadeIn';\r\n\r\nconst Tools = (props) => {\r\n\tconst resetProject = () => {\r\n\t\tif (\r\n\t\t\twindow.confirm('Are you sure you want to restart the current project?')\r\n\t\t) {\r\n\t\t\tprops.resetProject();\r\n\t\t\tprops.cancelCreatingTodo();\r\n\t\t}\r\n\t};\r\n\r\n\tif (props.working) {\r\n\t\treturn (\r\n\t\t\t<div className=\"tools\">\r\n\t\t\t\t<FaImage className={`tools-icon ${anime}`} />\r\n\t\t\t\t<GoTextSize className={`tools-icon ${anime}`} />\r\n\t\t\t\t<IoIosColorPalette className={`tools-icon ${anime}`} />\r\n\t\t\t\t<FaSkullCrossbones\r\n\t\t\t\t\tclassName={`tools-icon ${anime}`}\r\n\t\t\t\t\tonClick={resetProject}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tworking: state.working,\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps, { resetProject, cancelCreatingTodo })(\r\n\tTools,\r\n);\r\n","import React from 'react';\r\n\r\n//style\r\nimport '../styles/App.scss';\r\n//Components\r\nimport Header from './Header';\r\nimport Content from './Content';\r\nimport Tools from './Tools';\r\n\r\nconst App = () => {\r\n\treturn (\r\n\t\t<div className=\"app-container\">\r\n\t\t\t<Header />\r\n\t\t\t\r\n\t\t\t<Content />\r\n\t\t\t<Tools />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import { combineReducers } from 'redux';\r\n\r\n//Reducers!\r\nexport const workingStateReducer = (working = false, action) => {\r\n\tif (action.type === 'START_PROJECT') {\r\n\t\treturn (working = true);\r\n\t}\r\n\tif (action.type === 'RESET_PROJECT') {\r\n\t\treturn (working = false);\r\n\t}\r\n\treturn working;\r\n};\r\n//FORM OF CREATING A TASK STATE\r\nexport const creatingTodoReducer = (creatingTodo = false, action) => {\r\n\tif (action.type === 'CREATING_TODO') {\r\n\t\treturn (creatingTodo = true);\r\n\t}\r\n\tif (action.type === 'CREATE_TODO' || action.type === 'CANCEL_CREATING_TODO') {\r\n\t\treturn (creatingTodo = false);\r\n\t}\r\n\treturn creatingTodo;\r\n};\r\n\r\n//Todolists!!!!!\r\nexport const pendingTodoListReducer = (pendingList = [], action) => {\r\n\t//creating a task\r\n\tif (action.type === 'CREATE_TODO') {\r\n\t\tconst idCreator = pendingList.length;\r\n\t\tconst task = {\r\n\t\t\tid: idCreator,\r\n\t\t\ttext: action.payload.task,\r\n\t\t};\r\n\t\treturn [...pendingList, task];\r\n\t}\r\n\r\n\t//deleting a task\r\n\tif (action.type === 'DELETE_TODO') {\r\n\t\treturn pendingList.filter((task) => {\r\n\t\t\tif (task.id !== action.payload.taskId) {\r\n\t\t\t\treturn task;\r\n\t\t\t} else {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tif (action.type === 'RESET_PROJECT') {\r\n\t\tpendingList = [];\r\n\t}\r\n\r\n\treturn pendingList;\r\n};\r\n\r\n//\r\nexport default combineReducers({\r\n\tworking: workingStateReducer,\r\n\tcreatingTodo: creatingTodoReducer,\r\n\tpendingList: pendingTodoListReducer,\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore } from \"redux\";\r\n\r\nimport App from \"./components/App\";\r\nimport reducers from \"./reducers\";\r\n\r\nReactDOM.render(\r\n  <Provider store={createStore(reducers)}>\r\n    <App />\r\n  </Provider>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}